name: Auto-resolve PR conflicts (prefer PR branch)

# neira:meta
# id: NEI-20250217-github-script-core-fix
# intent: ci
# summary: –£–±—Ä–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ core/github –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —Å–ø–∏—Å–∫–∞ PR.

on:
  # –û–±–Ω–æ–≤–∏–ª–∏ PR ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—á–∏–Ω–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
  pull_request:
    types: [opened, reopened, synchronize, edited, labeled]
  # –í main —á—Ç–æ-—Ç–æ –≤–ª–∏–ª–æ—Å—å ‚Äî –æ–±–Ω–æ–≤–∏–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ PR
  push:
    branches:
      - main
      - master
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  resolve:
    name: Resolve conflicts for PR
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å PR, –ª–∏–±–æ –ø—Ä–∏ –ø—É—à–µ –≤ main
    runs-on: ubuntu-latest

    steps:
      - name: Compute context
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            // –ö–æ–≥–¥–∞ —Ç—Ä–∏–≥–≥–µ—Ä push, –Ω—É–∂–Ω–æ –ø—Ä–æ–±–µ–∂–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ PR
            const ev = process.env.GITHUB_EVENT_NAME || '';
            if (ev === 'push') {
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              core.setOutput('mode', 'batch');
              core.setOutput('prs', JSON.stringify(prs.map(p => ({
                number: p.number,
                headRef: p.head.ref,
                baseRef: p.base.ref,
                isCrossRepo: p.head.repo.full_name !== (context.repo.owner + '/' + context.repo.repo),
                headRepo: p.head.repo.full_name
              }))));
            } else {
              const p = (context.payload && context.payload.pull_request) ? context.payload.pull_request : null;
              if (!p) { core.setOutput('mode','batch'); core.setOutput('prs','[]'); return; }
              core.setOutput('mode', 'single');
              core.setOutput('prs', JSON.stringify([{
                number: p.number,
                headRef: p.head.ref,
                baseRef: p.base.ref,
                isCrossRepo: p.head.repo.full_name !== (context.repo.owner + '/' + context.repo.repo),
                headRepo: p.head.repo.full_name
              }]));
            }

      - name: Resolve (loop)
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRS: ${{ steps.ctx.outputs.prs }}
        with:
          script: |
            const exec = require('child_process').execSync;

            const prs = JSON.parse(process.env.PRS);
            const isCodex = (ref) => /^codex\//.test(ref) || /codex/i.test(ref);

            for (const pr of prs) {
              core.startGroup(`PR #${pr.number} (${pr.headRef} <- ${pr.baseRef})`);

              if (pr.isCrossRepo) {
                core.info('PR –∏–∑ fork ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç –ø—Ä–∞–≤ –ø—É—à–∏—Ç—å –≤ —á—É–∂–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π).');
                core.endGroup();
                continue;
              }

              try {
                // –ß–µ–∫–∞—É—Ç –≤–µ—Ç–∫–∏ PR –∏–∑ —ç—Ç–æ–≥–æ –∂–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                exec(`git init`, { stdio: 'inherit' });
                exec(`git remote add origin https://x-access-token:${process.env.GH_TOKEN}@github.com/${context.repo.owner}/${context.repo.repo}.git`, { stdio: 'inherit' });
                exec(`git fetch --no-tags origin ${pr.headRef}:${pr.headRef} ${pr.baseRef}:${pr.baseRef}`, { stdio: 'inherit' });
                exec(`git checkout ${pr.headRef}`, { stdio: 'inherit' });

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–∏—Ç–∞
                exec(`git config user.name "github-actions[bot]"`, { stdio: 'inherit' });
                exec(`git config user.email "41898282+github-actions[bot]@users.noreply.github.com"`, { stdio: 'inherit' });

                // –í–õ–ò–í–ê–ï–ú base –í –ü–û–õ–¨–ó–£ –ù–û–í–û–ô –í–ï–¢–ö–ò:
                // -X ours  => –ø–æ–±–µ–∂–¥–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ (PR)
                // –•–æ—á–µ—à—å –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞:  -X theirs
                let merged = true;
                try {
                  exec(`git merge origin/${pr.baseRef} -X ours --no-edit`, { stdio: 'inherit' });
                } catch (e) {
                  merged = false;
                }

                // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–º–µ—Ä–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ‚Äî –æ—Ç–º–µ–Ω—è–µ–º merge
                let unmerged = '';
                try {
                  unmerged = exec(`git ls-files -u`, { stdio: 'pipe' }).toString().trim();
                } catch (e) {}

                if (!merged || unmerged) {
                  // –ù–µ —Å–º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                  exec(`git merge --abort || true`, { stdio: 'inherit' });

                  // –î–ª—è codex-–≤–µ—Ç–æ–∫ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º PR, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª
                  if (isCodex(pr.headRef)) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      body: `ü§ñ –ê–≤—Ç–æ—Å–ª–∏—è–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (—Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã). PR –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ—Ç —Å–≤–µ–∂–µ–π –±–∞–∑—ã –∏–ª–∏ –≤—Ä—É—á–Ω—É—é —Ä–µ—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã.`
                    });
                    await github.rest.pulls.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: pr.number,
                      state: 'closed'
                    });
                    core.info('–°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: PR –∑–∞–∫—Ä—ã—Ç (codex/*).');
                  } else {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      body: `‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ç–∫—É **${pr.headRef}**.`
                    });
                    core.warning('–°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.');
                  }

                } else {
                  // –£—Å–ø–µ—Ö ‚Äî –ø—É—à–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–µ—Ç–∫—É PR
                  exec(`git push origin HEAD:${pr.headRef}`, { stdio: 'inherit' });
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –ø–æ–ª—å–∑—É –≤–µ—Ç–∫–∏ PR (strategy: \`-X ours\`).`
                  });
                  core.info('–ì–æ—Ç–æ–≤–æ: –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–µ—à–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã.');
                }
              } catch (e) {
                core.warning(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${e.message}`);
              }

              core.endGroup();
            }
